// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrganizationType {
  TEAM
  ORGANIZATION
}

enum IdentityProvider {
  SKOHR
  GOOGLE
  SAML
}

model Organization {
  id          String                @id @default(cuid())
  name        String
  slug        String?
  logo        String?
  description String?
  type        OrganizationType      @default(TEAM)
  members     Membership[]
  users       User[]                @relation("scope")
  parentId    String?
  parent      Organization?         @relation("organization", fields: [parentId], references: [id], onDelete: Cascade)
  children    Organization[]        @relation("organization")
  settings    OrganizationSettings?
  created     DateTime              @default(now())
  updated     DateTime              @updatedAt

  @@unique([slug, parentId])
  @@index([parentId])
}

model OrganizationSettings {
  id             String       @id @default(cuid())
  configured     Boolean      @default(false)
  verified       Boolean      @default(false) // members auto-accepted or not
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String       @unique
}

enum MembershipRole {
  ADMIN
  OWNER
  MEMBER
}

model Membership {
  id             String         @id @default(cuid())
  accepted       Boolean        @default(false)
  role           MembershipRole
  organization   Organization   @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  organizationId String
  userId         String

  @@unique([userId, organizationId])
  @@index([organizationId])
  @@index([userId])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String

  @@unique([provider, providerAccountId])
  @@index([userId])
  @@index([type])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  USER
  ADMIN
}

model User {
  id             String           @id @default(cuid())
  email          String?          @unique
  emailVerified  DateTime?
  role           Role             @default(USER)
  image          String?
  timezone       String           @default("America/New_York")
  timeFormat     Int?             @default(12)
  provider       IdentityProvider @default(SKOHR)
  providerId     String?
  metadata       Json?
  profile        Profile?
  accounts       Account[]
  sessions       Session[]
  teams          Membership[]
  organization   Organization?    @relation("scope", fields: [organizationId], references: [id], onDelete: SetNull)
  organizationId String?
  Application    Application[]
  Job            Job[]

  @@index([emailVerified])
  @@index([provider])
  @@index([providerId])
  @@map(name: "users")
}

model Profile {
  id       String   @id @default(cuid())
  name     String?
  username String?  @unique
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   String   @unique
  created  DateTime @default(now())
  updated  DateTime @updatedAt
}

enum ApplicationStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Application {
  id          String            @id @default(cuid())
  job         Job               @relation(fields: [jobId], references: [id])
  jobId       String
  applicant   User              @relation(fields: [applicantId], references: [id])
  applicantId String
  status      ApplicationStatus @default(PENDING)
  created     DateTime          @default(now())
}

enum JobStatus {
  DRAFT
  ACTIVE
  CLOSED
}

model Job {
  id           String        @id @default(cuid())
  title        String
  description  String
  location     String
  salary       Int
  applications Application[]
  skills       Skill[]
  status       JobStatus     @default(DRAFT)
  created      DateTime      @default(now())
  updated      DateTime      @updatedAt
  createdBy    User          @relation(fields: [createdById], references: [id])
  createdById  String
}

model Skill {
  id   Int    @id @default(autoincrement())
  name String
  jobs Job[]
}
